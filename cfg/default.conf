#
# This file is responsible for the site which serves the main releases from codeorigin. By default,
# it generates a site that operates in "break glass" emergency mode. All requests are served,
# regardless of where they come from.
#
# In production, the CDN should add a private header to origin fetches. All requests which do not
# include the correct header should be bounced via 301 redirect back to the CDN. This ensures that
# even if a client attempts to link to codeorigin, it will still be served from the CDN. The end
# result should be that codeorigin is only reachable for origin pulls from the CDN, decreasing its
# load and reducing the attack surface for DDOSs.
#
# Configuration information is in the README.md file.
#

# Increase map_hash_bucket_size to accommodate longer CDN tokens
map_hash_bucket_size 128;

# If the CDN_ACCESS_KEY environment variable is *not* set, operate in "break glass" mode where the
# container openly serves files without restriction. Otherwise, it responds with redirects to requests
# that don't carry a matching x-cdn-access request header.
#
# NOTE: We're using the "envsubst" feature that comes with docker-nginx because nginx does not
# currently have a way to access environment variables without significant workarounds.
# This is interpreted at run-time just before the server starts.
#
# This is preferred over substitution at build-time in Dockerfile as that would put the
# credentials inside the image, making it unsuitable to push to a public container registry.
map "${CDN_ACCESS_KEY}" $origin_mode {
    ""                  open;
    default             key;
}
map $origin_mode  $key_input { key $http_x_cdn_access; default none; }
map $origin_mode  $key_expect {
    key           "${CDN_ACCESS_KEY}";
    default       none;
}

server {
  listen        80;
  listen        [::]:80;
  server_name   localhost;

  # Turn off access logs and ignore most errors (eg. files not found etc.)
  #
  # docker-nginx provisions error.log as a symlink to /dev/stderr, which means they will not
  # be stored on disk in the container, but written to docker operator.
  # This is either your terminal, or the built-in logs handler of the application platform.
  #
  # For detailed logging during development about how nginx evaluates the location blocks
  # and pattern matches, change "crit" to "debug", and then build/run the container.
  access_log    off;
  error_log     /var/log/nginx/error.log crit;

  # Reduce overhead, and obsure server version
  server_tokens off;

  ##
  # Main location block for static assets
  ##
  location / {
    root /var/www/cdn;

    # Enable GZIP beyond just text/html
    # https://stackoverflow.com/a/6475493/319266
    gzip_types text/plain text/xml application/xml text/css text/javascript application/javascript application/x-javascript text/x-component application/json application/xhtml+xml application/rss+xml application/atom+xml application/vnd.ms-fontobject image/svg+xml application/x-font-ttf font/opentype;

    # Proxies must not mix up differently keyed responses
    add_header Vary "x-cdn-access";

    add_header Cache-Control "public";
    add_header Access-Control-Allow-Origin *;
    expires max;
    gzip on;
    gzip_comp_level 9;
    gzip_vary on;

    # Applies to charset_types (mainly for JS and CSS)
    charset utf-8;

    # Let rerouting responses be cached for a shorter time for faster recovery from mistakes
    if ($key_expect != $key_input) { expires 5m; return 302 https://code.jquery.com$uri; }
  }

  # Legacy redirects for renamed files
  location = /jquery-git1.js { return 301 https://code.jquery.com/jquery-git.js; }
  location = /jquery-git2.js { return 301 https://code.jquery.com/jquery-git.js; }
  location = /jquery-compat-git.js { return 301 https://code.jquery.com/jquery-git.js; }
  location = /jquery-git1.min.js { return 301 https://code.jquery.com/jquery-git.min.js; }
  location = /jquery-git2.min.js { return 301 https://code.jquery.com/jquery-git.min.js; }
  location = /jquery-compat-git.min.js { return 301 https://code.jquery.com/jquery-git.min.js; }

  ##
  # Redirects for WordPress pages and Jenkins artefacts that were previously
  # served at code.jquery.com but are now at releases.jquery.com.
  #
  # Ref <https://github.com/jquery/infrastructure/issues/474#issuecomment-844582865>.
  #
  # Prefer $uri over $request_uri, <https://stackoverflow.com/a/48709976/319266>.
  ##

  # Domain root, and WordPress pages (canonically with trailing slash)
  location = / { return 301 https://releases.jquery.com/; }
  location = /jquery/ { return 301 https://releases.jquery.com$uri; }
  location = /ui/ { return 301 https://releases.jquery.com$uri; }
  location = /mobile/ { return 301 https://releases.jquery.com$uri; }
  location = /color/ { return 301 https://releases.jquery.com$uri; }
  location = /qunit/ { return 301 https://releases.jquery.com$uri; }
  location = /pep/ { return 301 https://releases.jquery.com$uri; }

  # Legacy redirects to append trailing slash
  location = /jquery { return 301 https://releases.jquery.com$uri/; }
  location = /ui { return 301 https://releases.jquery.com$uri/; }
  location = /qunit { return 301 https://releases.jquery.com$uri/; }
  location = /mobile { return 301 https://releases.jquery.com$uri/; }
  location = /color { return 301 https://releases.jquery.com$uri/; }

  # Jenkins artefacts were pushed to an isolated area mounted as "/git/"
  # on the codeorigin server. The contents were only accessible via a
  # plethora of rewrites rules that made these files blend in among
  # CDN assets from a URL prespective. For example:
  #
  # - "/ui/foo-1.2.3.js" would be served from "/cdn/ui/foo-1.2.3.js"
  # - "/ui/foo-git.js" would be served from "/git/ui/foo-git.js".
  #
  # Full list at:
  # https://github.com/jquery/infrastructure/issues/474#issuecomment-844582865
  #
  location ~* -git\. { return 301 https://releases.jquery.com/git$uri; }
  location ^~ /mobile/git/ { return 301 https://releases.jquery.com/git$uri; }

  # New-style /git/ URLs as of March 2021
  #
  # This must "win" over the "-git" location match as otherwise
  # we would wrongly send "/git/foo-git.js" to "/git/git/foo-git.js"
  #
  # Achieved by using the `^~` operator instead of a simple prefix match,
  # because `^~` has priority over `~*`.
  #
  # Ref https://www.digitalocean.com/community/tutorials/understanding-nginx-server-and-location-block-selection-algorithms#how-nginx-chooses-which-location-to-use-to-handle-requests
  #
  location ^~ /git/ { return 301 https://releases.jquery.com$uri; }

  # redirect server error pages to the static page /50x.html
  error_page    500 502 503 504  /50x.html;
  location = /50x.html {
    root   /usr/share/nginx/html;
  }
}

# vim: ts=2 sw=2 et
